use crate::*;
use ark_ec::PairingEngine;
use ark_ff::Field;
use ark_std::{end_timer, start_timer};
use std::collections::BTreeMap;

/// The DKG context that holds all of the local state for participating in the DKG
pub struct PubliclyVerifiableDkg<E: PairingEngine> {
    //pub ed_key: ed25519::Keypair,
    pub params: Params,
    pub pvss_params: PubliclyVerifiableParams<E>,
    pub session_keypair: ferveo_common::Keypair<E>,
    pub validators: Vec<ferveo_common::Validator<E>>,
    pub vss: BTreeMap<u32, PubliclyVerifiableSS<E>>,
    pub domain: ark_poly::Radix2EvaluationDomain<E::Fr>,
    pub state: DkgState,
    pub me: usize,
    pub validator_set: ValidatorSet,
    //pub local_shares: Vec<E::G2Affine>,
    //pub announce_messages: Vec<PubliclyVerifiableAnnouncement<E>>,
}

#[derive(Clone)]
/// Represents a tendermint validator
pub struct TendermintValidator {
    /// Total voting power in tendermint consensus
    pub power: u64
}

#[derive(Clone)]
/// The set of tendermint validators for a dkg instance
pub struct ValidatorSet {
    pub validators: Vec<TendermintValidator>,
}

impl ValidatorSet {
    pub fn total_voting_power(&self) -> u64 {
        self.validators
            .iter()
            .map(|v| v.power)
            .sum()
    }
}


impl<E: PairingEngine> PubliclyVerifiableDkg<E> {
    /// Create a new DKG context to participate in the DKG
    /// Every identity in the DKG is linked to an ed25519 public key;
    /// `ed_key` is the local identity.
    /// `params` contains the parameters of the DKG such as number of shares
    /// `rng` is a cryptographic random number generator
    pub fn new<R: Rng>(
        validator_set: ValidatorSet,
        validator_keys: &[ferveo_common::PublicKey<E>],
        params: Params,
        me: usize,
        rng: &mut R,
    ) -> Result<Self> {
        use ark_std::UniformRand;
        let domain = ark_poly::Radix2EvaluationDomain::<E::Fr>::new(
            params.total_weight as usize,
        )
        .ok_or_else(|| anyhow!("unable to construct domain"))?;

        Ok(Self {
            session_keypair: ferveo_common::Keypair::<E>::new(rng),
            params,
            pvss_params: PubliclyVerifiableParams::<E> {
                g: E::G1Projective::prime_subgroup_generator(),
                h: E::G2Projective::prime_subgroup_generator(),
            },
            //participants: vec![],
            vss: BTreeMap::new(),
            domain,
            state: DkgState::Init,
            me,
            validators: partition_domain(
                &params,
                &validator_set,
                validator_keys,
            )?,
            validator_set,
            //me: 0, // TODO: invalid value
            //final_state: None,
            //local_shares: vec![],
            // TODO: Validators don't announce themselves through DKG
            // TODO: Instead, we read stakes from storage
        })
    }
    /// Create a new PVSS instance within this DKG session, contributing to the final key
    /// `rng` is a cryptographic random number generator
    /// Returns a PVSS dealing message to post on-chain
    pub fn share<R: Rng>(&mut self, rng: &mut R) -> Result<Message<E>> {
        use ark_std::UniformRand;
        print_time!("PVSS Sharing");

        let vss =
            PubliclyVerifiableSS::<E>::new(&E::Fr::rand(rng), &self, rng)?;

        let sharing = vss.clone();
        self.vss.insert(self.me as u32, vss);

        Ok(Message::Deal(sharing))
    }
    /// Aggregate all received PVSS messages into a single message, prepared to post on-chain
    pub fn aggregate(&mut self) -> Message<E> {
        let pvss = PubliclyVerifiableSS::<E>::aggregate(self, &self.vss);
        Message::Aggregate(pvss)
    }

    /// Converts an ed25519 key to the index of that participant
    //TODO: this is not a good workaround for finding dealer from ed_key
    //pub fn find_by_key(&self, ed_key: &ed25519::PublicKey) -> Option<usize> {
    //    self.participants.iter().position(|p| p.ed_key == *ed_key)
    //}

    /// Returns the public key generated by the DKG
    pub fn final_key(&self) -> E::G1Affine {
        self.vss
            .iter()
            .map(|(_, vss)| vss.coeffs[0].into_projective())
            .sum::<E::G1Projective>()
            .into_affine()
    }

    /// Handle a DKG related message posted on chain
    /// `sender` is the validator id of the sender of the message
    /// `payload` is the content of the message
    pub fn handle_message(
        &mut self,
        sender: u32,
        payload: Message<E>,
    ) -> Result<Option<SignedMessage>> {
        match payload {
            Message::Deal(sharing) => {
                if let DkgState::Init = self.state {
                    /*let dealer = self.find_by_key(signer).ok_or_else(|| {
                        anyhow!("received dealing from unknown dealer")
                    })? as u32;*/
                    if sender != self.me as u32 {
                        if self.vss.contains_key(&sender) {
                            return Err(anyhow!("Repeat dealer {}", sender));
                        }
                        self.vss.insert(sender, sharing);
                    }
                    // TODO: Shall we add here a check whether enough dealers (> 66%) have shared their PVSS? If so, we'd move to a Dealt state.
                    // Once we are in a dealt state, we'd trigger the generation of the transcript and share the decryption keys
                }
                Ok(None)
            }
            Message::Aggregate(vss) => {
                if let DkgState::Shared = self.state {
                    let minimum_weight = self.params.total_weight
                        - self.params.security_threshold;
                    let verified_weight = vss.verify_aggregation(&self)?;
                    if verified_weight >= minimum_weight {
                        //self.local_shares = local_shares;
                        self.state = DkgState::Success;
                    } else {
                        self.state = DkgState::Aggregated {
                            finalized_weight: verified_weight,
                        };
                    }
                }
                Ok(None)
            } //_ => Err(anyhow!("Unknown message type for this DKG engine")),
        }
    }
}

#[derive(Serialize, Deserialize, Clone, Debug)]
#[serde(bound = "")]
pub enum Message<E: PairingEngine> {
    #[serde(with = "ferveo_common::ark_serde")]
    Deal(PubliclyVerifiableSS<E>),
    #[serde(with = "ferveo_common::ark_serde")]
    Aggregate(PubliclyVerifiableSS<E>),
}

#[derive(Debug, Clone)]
pub struct PubliclyVerifiableAnnouncement<E: PairingEngine> {
    pub session_key: ferveo_common::PublicKey<E>,
    pub stake: u64,
}

#[cfg(test)]
mod tests {

    use crate::dkg::PubliclyVerifiableDkg;
    use crate::*;
    use ark_bls12_381::G1Affine;
    use ark_ec::{bls12::Bls12, PairingEngine};
    use ark_std::{end_timer, start_timer};
    use group_threshold_cryptography::{
        decrypt_with_shared_secret, encrypt, setup, Ciphertext,
        DecryptionShare, PrivateDecryptionContext, PrivateKeyShare,
        PublicDecryptionContext, PublicKeyShares,
    };
    use itertools::izip;

    fn create_info(vp: u64) -> TendermintValidator {
       TendermintValidator {
           power: vp,
       }
    }

    #[test]
    pub fn test_pvdkg_tpke() {
        use ark_ec::{AffineCurve, ProjectiveCurve};
        let rng = &mut ark_std::test_rng();
        //use rand_old::SeedableRng;
        //let ed_rng = &mut rand_old::rngs::StdRng::from_seed([0u8; 32]);

        let params = Params {
            tau: 0u64,
            security_threshold: 300 / 3,
            total_weight: 300,
        };
        let validator_set = ValidatorSet {
            validators: (1..11u64).map(|vp| TendermintValidator{power: vp}).collect::<Vec<_>>(),
        };

        let validator_keys = (0..10)
            .map(|_| {
                ferveo_common::PublicKey::<ark_bls12_381::Bls12_381>::default()
            })
            .collect::<Vec<_>>();

        // for _ in 0..1 {
        let mut contexts = vec![];
        for me in 0..10 {
            contexts.push(
                PubliclyVerifiableDkg::<ark_bls12_381::Bls12_381>::new(
                    validator_set.clone(),
                    &validator_keys,
                    params.clone(),
                    me,
                    rng,
                )
                .unwrap(),
            );
        }
        use std::collections::VecDeque;
        let mut messages = VecDeque::new();

        let mut dealt_weight = 0u32;
        for participant in contexts.iter_mut() {
            if dealt_weight < params.total_weight - params.security_threshold {
                let msg = participant.share(rng).unwrap();
                let msg: Message<ark_bls12_381::Bls12_381> = msg; //.verify().unwrap().1;
                messages.push_back((participant.me, msg));
                dealt_weight += participant.validators[participant.me].weight;
            }
        }
        for msg in messages.iter() {
            for node in contexts.iter_mut() {
                node.handle_message(msg.0 as u32, msg.1.clone()).unwrap();
            }
        }

        let tpke_pubkey = contexts[0].final_key();
        /*
        ///////////////////////////////////////// TPKE /////////////////////////////////////////
        let threshold = contexts[0].params.security_threshold as usize; //16 * 2 / 3;
        let shares_num = contexts[0].params.total_weight as usize; //16;
        let num_entities = contexts.len();
        let msg: &[u8] = "abc".as_bytes();

        // let (_, privkey, tpke_contexts) = setup::<ark_bls12_381::Bls12_381>(
        //     threshold,
        //     shares_num,
        //     num_entities,
        // );

        use ark_std::UniformRand;
        let rng = &mut ark_std::test_rng();

        let window_size = FixedBaseMSM::get_mul_window_size(100);
        let scalar_bits = <Bls12<ark_bls12_381::Parameters> as PairingEngine>::Fr::size_in_bits();
        let g = <Bls12<ark_bls12_381::Parameters> as PairingEngine>::G1Affine::prime_subgroup_generator();
        let h = <Bls12<ark_bls12_381::Parameters> as PairingEngine>::G2Affine::prime_subgroup_generator();

        let mut private_contexts = vec![];
        let mut public_contexts = vec![];

        // pub struct PubliclyVerifiableDKG<E>
        // {
        //     pub ed_key: ed25519::Keypair,
        // pub params: Params,
        //     pub pvss_params: PubliclyVerifiableParams<E>,
        // pub session_keypair: PubliclyVerifiableKeypair<E>,
        //     pub participants: Vec<PubliclyVerifiableParticipant<E>>,
        //     pub vss: BTreeMap<u32, PubliclyVerifiableSS<E>>,
        //     pub domain: ark_poly::Radix2EvaluationDomain<E::Fr>,
        //     pub state: DKGState<E>,
        //     pub me: usize,
        //     pub local_shares: Vec<E::G2Affine>,
        // }

        let fft_domain = ark_poly::Radix2EvaluationDomain::<
            <Bls12<ark_bls12_381::Parameters> as PairingEngine>::Fr,
        >::new(shares_num)
        .unwrap();
        let mut domain_points = Vec::with_capacity(shares_num);
        let mut point =
            <Bls12<ark_bls12_381::Parameters> as PairingEngine>::Fr::one();
        let mut domain_points_inv = Vec::with_capacity(shares_num);
        let mut point_inv =
            <Bls12<ark_bls12_381::Parameters> as PairingEngine>::Fr::one();

        for _ in 0..shares_num {
            domain_points.push(point);
            point *= fft_domain.group_gen;
            domain_points_inv.push(point_inv);
            point_inv *= fft_domain.group_gen_inv;
        }

        // let pubkey_shares: Vec<
        //     <Bls12<ark_bls12_381::Parameters> as PairingEngine>::G1Affine,
        // > = vec![];

        // for context in contexts {
        for (_, (context, domain, domain_inv, public)) in izip!(
            contexts,
            domain_points.chunks(shares_num / num_entities),
            domain_points_inv.chunks(shares_num / num_entities),
            pubkey_shares.chunks(shares_num / num_entities),
        )
        .enumerate()
        {
            let b =
                <Bls12<ark_bls12_381::Parameters> as PairingEngine>::Fr::rand(
                    rng,
                );
            let private_key_share = PrivateKeyShare::<ark_bls12_381::Bls12_381> {
                private_key_shares: context.local_shares,
            };
            let mut blinded_key_shares = private_key_share.blind(b.clone());
            blinded_key_shares.multiply_by_omega_inv(domain_inv);

            private_contexts.push(PrivateDecryptionContext::<ark_bls12_381::Bls12_381> {
                index: 0,//context.me,
                b,
                b_inv: b.inverse().unwrap(),
                private_key_share,
                public_decryption_contexts: vec![],
                g,
                g_inv: <Bls12<ark_bls12_381::Parameters> as PairingEngine>::G1Prepared::from(-g),
                h_inv: <Bls12<ark_bls12_381::Parameters> as PairingEngine>::G2Prepared::from(-h),
                scalar_bits,
                window_size,
            });
            let mut lagrange_n_0 = domain.iter().product::<<Bls12<ark_bls12_381::Parameters> as PairingEngine>::Fr>();
            if domain.len() % 2 == 1 {
                lagrange_n_0 = -lagrange_n_0;
            }
            public_contexts.push(PublicDecryptionContext::<
                ark_bls12_381::Bls12_381,
            > {
                domain: domain.to_vec(),
                public_key_shares: PublicKeyShares::<ark_bls12_381::Bls12_381> {
                    public_key_shares: public.to_vec(),
                },
                blinded_key_shares,
                lagrange_n_0,
            });
        }
        for private in private_contexts.iter_mut() {
            private.public_decryption_contexts = public_contexts.clone();
        }

        let ciphertext =
            encrypt::<_, ark_bls12_381::Bls12_381>(msg, tpke_pubkey, rng);

        // create Decryption Shares
        let mut shares: Vec<DecryptionShare<ark_bls12_381::Bls12_381>> = vec![];
        for context in private_contexts.iter() {
            shares.push(context.create_share(&ciphertext));
        }

        let prepared_blinded_key_shares =
            private_contexts[0].prepare_combine(&shares);
        let s = private_contexts[0]
            .share_combine(&shares, &prepared_blinded_key_shares);

        let plaintext = decrypt_with_shared_secret(&ciphertext, &s);
        assert!(plaintext == msg)

        // }*/
    }
}
